The first goal is to just get the program to run at all. I ran it through Ghidra to disassemble it and view the pieces. 
I would have used immunity debugger w/ Mona but this is not compatible with Windows.
This didn't work either. I blame my lack of experience with assembly on the non-viable nature of this attempt.
(It took me a few minutes to realize I needed to use nc or telnet to connect to my localhost. I can be a bit dense sometimes.)
Used r2 to open it for debugging

r2 -d <nameofexecutable>

Tried to use metasploit's pattern tool to generate a pattern and this failed. 
Used ROT13 on my cyclic pattern to try to locate it using the offet tool, and this failed as well.

The program crashes upon posting 300 or more characters, so I decided to slice it.

(using Python's interactive prompt)
print "A"*100+"B"*100+"C"*100

Using radare2's register view, rdp shows 0x5050505050505050
0x5050505050505050 = PPPPPPPP
Rotating this = CCCCCCCC, so now we know its in the upper 100 of our 300 crasher.

(python prompt)
print "A"*100+"B"*100+"C"*50+"D"*50

R2 REG: 0x5050505050505050
Rotated: CCCCCCCC
Offset Range: 200-250

(python prompt)
print "A"*200+"B"*25+"C"*25+"A"*50

R2 REG: 0x5050505050505050
Rotated: CCCCCCCC
Offset Range: 225-250

(python prompt)
print "A"*225+"B"*5+"C"*5+"D"*5+"E"*5+"F"*5+"A"*50

R2 REG: 0x50505050504f4f4f
Rotated: CCCCCBBB ???? 
Program must be little endian
R2 REG (rotated, reversed): BBBCCCCC
Offset: 225

02/08/2021 - 19:58 EST
Tested offset. Off by two.
Offset: 227
Just to test my little-endian theory, replaced my print test with
print "A"*227+"12345678"+"A"*65
and after rotating and de-hexing the registry value, got 87654321
Little endian confirmed.
